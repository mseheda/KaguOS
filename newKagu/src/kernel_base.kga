// KaguOS kernel main code

// ##########################################
// # INITRAMFS_START                        #
// ##########################################
DEBUG_OFF
write "Operation register:" to INFO_REG_OP
write "A register:" to INFO_REG_A
write "B register:" to INFO_REG_B
write "C register:" to INFO_REG_C
write "D register:" to INFO_REG_D
write "Result register:" to INFO_REG_RES
write "Comparison result register:" to INFO_REG_BOOL_RES
write "Display buffer:" to INFO_DISPLAY_BUFFER
write "Display color:" to INFO_DISPLAY_COLOR
write "Keyboard buffer:" to INFO_KEYBOARD_BUFFER
write "Program counter:" to INFO_PROGRAM_COUNTER
write "Stack pointer:" to INFO_REG_STACK_PTR
write "Previous stack pointer:" to INFO_REG_STACK_PREV_PTR

write "RAMFS init - done." to DISPLAY_BUFFER
write COLOR_GREEN to DISPLAY_COLOR
write OP_DISPLAY_LN to REG_OP
cpu_exec

// ##########################################
// # INITRAMFS_END                          #
// ##########################################


// ##########################################
// # KERNEL_START                           #
// ##########################################
DEBUG_ON
    // # Display welcome message:
    write "Welcome to KaguOS" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec
DEBUG_OFF

    var exitStr
    write "exit" to var:exitStr
    var kernelExtStr
    write "kernel_ext" to var:kernelExtStr

label:kernel_start
    // Display prompt to enter the value:
    write " :) " to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY to REG_OP
    cpu_exec

label:dummy
    // read cmd from keyboard
    write OP_READ_INPUT to REG_OP
    cpu_exec

    // split into command and arguments:
    copy KEYBOARD_BUFFER to REG_A
    write "1" to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec
    var parsedStr
    copy REG_RES to var:parsedStr

    // Display a message with the first component of input:
    write "Parsed command:" to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec
    copy var:parsedStr to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Check if command is exit if not then jump to the start of the loop
    // otherwise we will go to the next instruction which is exit
    copy var:parsedStr to REG_A
    copy var:exitStr to REG_B
    write OP_CMP_EQ to REG_OP

    cpu_exec

    jump_if label:kernel_end

    copy var:parsedStr to REG_A
    copy var:kernelExtStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:kernel_ext

    jump label:kernel_start

label:kernel_end
    // Print bye message and exit:
    write "Good bye!" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    write OP_HALT to REG_OP
    cpu_exec

// ##########################################
// # KERNEL_END                             #
// ##########################################

// func:some_name => label:func__some_name

// label:test => label:func__some_name__test
//     return
// func_end:some_name

// call some_name REG_A REG_B "Test string"
